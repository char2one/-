import { buffer } from 'micro';
import crypto from 'crypto';

export const config = {
  api: {
    bodyParser: false,
  },
};

const PACHCA_TOKEN = process.env.PACHCA_TOKEN;
const PACHCA_WEBHOOK_SECRET = process.env.PACHCA_WEBHOOK_SECRET;
const WELCOME_MESSAGE_TYPE = process.env.WELCOME_MESSAGE_TYPE || 'extended';

const messages = {
  extended: `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –ê–∫–∞–¥–µ–º–∏–∏ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –ë–∏–∑–Ω–µ—Å–∞{{name_greeting}}!

–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! 
–ñ–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –∫—Ä—É—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äì –∑–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç.

–í–∞–∂–Ω–æ –¥–ª—è –≤—Å–µ—Ö:
üìå –í –≤–µ—Ç–∫–µ –æ—Ç–¥–µ–ª–∞ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–æ 21:00. 
–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º –±—ã—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.

–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –æ—Ç–ª–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ! üöÄ

–í –æ–±—â–µ–º —á–∞—Ç–µ –ê–ú–ë —Ç–µ–±—è —Å–∫–æ—Ä–æ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏ —Ç–∞–º —Ç—ã —É–≤–∏–¥–∏—à—å –≤—Å–µ—Ö –Ω–∞—Å. 

–í –≤–µ—Ç–∫–µ "–æ—Ç—á–µ—Ç –æ—Ç–¥–µ–ª–∞" ‚Äî –≤—Å—è –∫–æ–º–∞–Ω–¥–∞ —Ç–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–∞, –∑–Ω–∞–∫–æ–º—å—Å—è!

P.S. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äì –æ–±—Ä–∞—â–∞–π—Å—è, —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º! üòä
`,
};

function verifySignature(req, secret) {
  const signature = req.headers['x-pachca-signature'];
  if (!signature) return false;

  const buf = Buffer.from(req.rawBody, 'utf8');
  const hmac = crypto.createHmac('sha256', secret);
  hmac.update(buf);
  const digest = hmac.digest('hex');

  return signature === digest;
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.status(405).send('Method Not Allowed');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  req.rawBody = (await buffer(req)).toString('utf8');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
  if (!verifySignature(req, PACHCA_WEBHOOK_SECRET)) {
    res.status(401).send('Unauthorized');
    return;
  }

  const event = JSON.parse(req.rawBody);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  if (
    event.type === 'space_members_changed' &&
    event.data.added &&
    event.data.added.length > 0
  ) {
    for (const user of event.data.added) {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—á–µ—Ä–µ–∑ API –ü–∞—á–∫–∏)
      await fetch('https://api.pachca.com/v1/messages/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${PACHCA_TOKEN}`,
        },
        body: JSON.stringify({
          recipient_id: user.id,
          text: messages[WELCOME_MESSAGE_TYPE].replace(
            '{{name_greeting}}',
            user.name ? `, ${user.name}` : ''
          ),
        }),
      });
    }
  }

  res.status(200).send('OK');
}
